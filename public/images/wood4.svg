<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   sodipodi:docname="wood4.svg"
   inkscape:version="1.0beta1 (32d4812, 2019-09-19)"
   id="svg8"
   version="1.1"
   viewBox="0 0 161.5589 158.75339"
   height="158.75339mm"
   width="161.5589mm">
  <defs
     id="defs2">
    <meshgradient
       y="-1.0798224"
       x="0"
       gradientUnits="userSpaceOnUse"
       id="meshgradient857"
       inkscape:collect="always">
      <meshrow
         id="meshrow859">
        <meshpatch
           id="meshpatch861">
          <stop
             id="stop863"
             style="stop-color:#ffffff;stop-opacity:1"
             path="c 170.667,0  341.333,0  512,0" />
          <stop
             id="stop865"
             style="stop-color:#000000;stop-opacity:1"
             path="c 0,171.027  0,342.053  0,513.08" />
          <stop
             id="stop867"
             style="stop-color:#ffffff;stop-opacity:1"
             path="c -170.667,0  -341.333,0  -512,0" />
          <stop
             id="stop869"
             style="stop-color:#000000;stop-opacity:1"
             path="c 0,-171.027  0,-342.053  0,-513.08" />
        </meshpatch>
      </meshrow>
    </meshgradient>
  </defs>
  <sodipodi:namedview
     inkscape:window-maximized="0"
     inkscape:window-y="436"
     inkscape:window-x="1200"
     inkscape:window-height="1035"
     inkscape:window-width="1920"
     fit-margin-bottom="0"
     fit-margin-right="0"
     fit-margin-left="0"
     fit-margin-top="0"
     showgrid="false"
     inkscape:document-rotation="0"
     inkscape:current-layer="layer1"
     inkscape:document-units="mm"
     inkscape:cy="340.00639"
     inkscape:cx="-276.12043"
     inkscape:zoom="0.35"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     borderopacity="1.0"
     bordercolor="#666666"
     pagecolor="#ffffff"
     id="base" />
  <metadata
     id="metadata5">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     transform="translate(-33.369363,-58.206642)"
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Layer 1">
    <g
       style="opacity:1;fill:url(#meshgradient857);fill-opacity:1;stop-opacity:1"
       id="g841"
       transform="matrix(0,-0.31006521,0.31488062,0,33.709378,216.96003)">
      <path
         style="fill-opacity:1"
         inkscape:connector-curvature="0"
         id="path837"
         fill="#96642c"
         d="M 0,256 V 0 H 256 512 V 256 512 H 256 0 Z" />
      <path
         style="fill-opacity:1"
         inkscape:connector-curvature="0"
         id="path839"
         d="M 6.8143,501.4 C 8.4927,377.85 19.6513,254.24 10.606,130.73 8.9296,87.165 7.2954,43.784 6.8853,0.19 18.7093,35.083 11.009,72.256 14.94,108.2 c 0.60468,95.044 8.9642,190.32 -0.78216,285.16 -2.341,36.731 -3.8412,73.527 -3.8271,110.34 -2.6654,8.9807 -5.2046,1.9548 -3.5165,-2.2947 z m 35.125,-25.15 c -3.179,-125.7 -9.012,-251.66 0.349,-377.23 0.092,-33.006 -1.399,-66.074 1.236,-99.02 0.40029,115.88 3.2765,218.66 -2.8224,328.56 6.6409,65.97 0.29866,101.84 8.3481,155.6 1.1935,22.219 -12.517,19.49 -7.0943,-0.57906 l 0.05501,-3.6684 z m 10.498,32.5 c -4.728,-177.23 -3.952,-333.12 -0.185,-496.2 14.787,-3.9378 1.0795,33.058 5.2627,44.161 -12.609,156.39 5.7067,302.75 1.7644,447.87 -0.93758,2.6058 -3.7226,5.5428 -6.842,4.1718 z m 12.043,-6.7502 c 4.606,-39.39 2.294,-79.04 -2.14,-118.29 -6.205,-89.43 -6.656,-179.17 -1.85,-268.67 1.466,-34.208 -0.025,-69.561 5.559,-102.96 5.268,18.734 -0.984,41.842 -0.843,62.327 -1.55,24.817 -2.751,49.713 -1.544,74.573 5.35,-47.15 1.795,-94.968 9.52,-141.9 -1.506,67.218 -8.65,134.23 -8.433,201.53 -1.3387,73.723 4.0988,147.37 12.6,220.53 1.2796,21.885 0.49109,60.196 -2.4882,71.842 -1.965,-35.12 3.498,-70.53 -3.531,-105.35 -13.278,-364.96 -12.07,-165.81 0.341,62.74 -0.43019,10.898 2.7794,45.058 -7.1908,43.625 z m -5.876,-243.73 c -3.0922,1.8163 3.2473,2.117 0,0 z m 33.89,251.19 c 4.425,-77.77 2.776,-155.73 6.418,-233.54 -22.893,-60.04 -14.117,-125.35 -10.715,-187.84 8.721,-22.85 -8.336,-74.557 12.203,-79.139 4.531,40.003 -7.3484,81.614 7.4198,120.54 11.974,25.458 13.775,53.397 12.792,81.153 -4.8741,56.428 3.6921,127.48 11.28,190.78 3.1459,28.045 2.5397,56.222 5.1625,84.269 1.124,13.766 -11.902,25.17 -9.0542,4.0864 -1.9295,-29.52 2.8974,-59.823 -3.0796,-88.867 -20.623,-2.2293 -10.912,36.585 -16.33,51.892 -3.7655,18.858 -0.7261,44.373 -12.081,58.666 l -2.2887,-0.70552 -1.7243,-1.2879 z m 12.916,-6.96 c 6.58,-17.962 0.54699,-66.886 16.939,-66.208 3.2999,18.631 4.5318,53.828 -0.78751,62.681 -1.3409,-11.773 8.7762,-49.667 -7.2466,-43.942 -2.1392,14.22 0.63409,32.618 -8.9046,47.469 z m 32.202,2.75 c 6.9793,-76.491 -4.4534,-152.84 -12.463,-228.75 -3.411,-43.114 -3.244,-86.448 -0.95965,-129.62 -1.275,-16.683 -33.837,-41.094 -3.3051,-41.474 9.5105,-23.074 -1.6144,-48.772 1.1859,-72.994 7.7925,-38.624 -8.461,33.789 9.9914,23.083 0.96897,-11.832 6.4405,-55.829 3.7019,-22.398 -11.982,108.2 -17.345,218.41 2.5089,326.03 3.6582,39.01 3.6692,78.232 6.142,117.32 -7.8233,7.4463 1.5081,22.79 -6.8021,28.809 z m 5.6312,1.25 c 7.9157,-25.138 0.16479,-52.147 10.028,-76.391 3.094,-13.963 -8.7217,-54.714 -1.6937,-54.075 6.2425,42.613 4.2618,86.333 -4.5438,128.25 -0.46325,1.9599 -2.2665,1.792 -3.7907,2.2123 z m 10.096,2.75 c 7.6755,-26.102 4.4562,-53.859 11.365,-79.603 -4.8938,-88.305 -24.949,-176.65 -23.29,-259.32 3.2151,-29.474 -8.6239,-60.189 4.2509,-88.622 2.9457,-22.438 -4.532,-50.67 5.37,-68.464 15.181,-25.055 3.8996,23.093 3.2487,32.228 -8.4183,70.816 -1.8641,117.84 -3.3694,213.6 17.979,65.9 21.922,133.4 18.675,196.44 -2.5582,12.532 -4.7868,57.899 -16.251,53.737 z m 38.261,-6.5 c 5.8752,-82.585 8.265,-165.84 -1.4217,-248.24 -2.9019,21.359 -18.936,19.28 -16.385,-1.507 -8.5391,-44.68 -17.351,-91.262 -4.4357,-136.07 6.5386,-29.721 16.617,-58.917 18.188,-89.525 -4.202,8.26 -14.673,46.27 -8.3137,18.053 -3.4416,-11.568 15.979,-52.29 14.283,-21.81 -2.1155,9.3007 -9.4872,45.923 -1.9641,39.745 2.6165,-19.805 -0.73165,-69.771 32.023,-55.181 3.1544,35.664 4.5946,71.495 13.838,106.2 -0.32125,24.37 2.1102,57.667 -12.691,76.003 -8.2409,-17.686 1.0899,-45.603 -13.005,-58.379 -18.686,32.417 -4.312,49.207 -7.1767,106.3 -14.467,95.279 24.029,177.94 6.0477,266.79 -3.9249,-19.871 -1.7575,10.484 -6.4627,-8.6764 -3.1509,-27.773 4.6472,-55.988 -4.6351,-83.321 -1.9273,29.802 7.5691,61.39 -3.2442,90.315 -5.7016,7.7385 -4.7815,6.9607 -4.645,-0.70374 z m 2.0057,2.5208 c -3.0923,1.8163 3.2473,2.117 0,0 z m 7.0304,-183.36 c 0.30338,-40.418 -4.5346,-92.033 -7.6981,-138.11 -6.3417,8.397 -7.3593,49.613 -16.737,20.717 -13.08,-32.332 1.7725,-66.349 11.635,-97.324 4.8771,-12.577 -7.252,-23.89 -5.991,-5.1611 -8.0948,33.416 -16.818,68.093 -10.831,102.62 -6.0313,21.587 20.958,33.752 21.243,11.959 6.5585,21.466 2.7681,45.281 6.0126,67.675 1.3275,25.592 1.9898,51.242 1.0273,76.86 1.5886,-13.023 0.76792,-26.166 1.3391,-39.24 z m -19.289,-90.452 c -2.8098,-7.622 3.8112,4.1307 0,0 z m 33.474,271.04 c -7.456,-11.866 13.136,-37.835 10.308,-11.258 1.7931,7.5676 -5.302,32.212 -10.308,11.258 z m 13.16,8.25 c 3.3281,-36.091 -7.904,-71.1 -14.102,-106.09 -6.0956,-74.271 -10.707,-149.43 0.12793,-223.51 6.6915,5.1061 5.0522,49.114 14.632,29.026 -1.2831,-19.782 22.345,-22.186 14.812,0.35181 5.5978,87.307 3.014,174.87 7.0056,262.24 -6.4502,-87.502 -2.2421,-175.48 -10.546,-262.88 -14.248,-6.6918 -9.4765,44.191 -22.06,17.023 -12.612,38.854 -6.7263,80.396 -6.6181,120.46 3.4416,53.39 20.757,105.77 17.423,159.51 z m 25.566,-26.5 c -4.2194,-65.566 -5.7766,-202.21 -5.0257,-303.65 7.02,-59.598 10.791,-119.88 5.7237,-179.8 12.267,8.1926 2.0596,56.021 5.3445,21.018 -1.4762,-17.208 3.8795,-18.466 2.5421,-0.81751 -1.1683,61.606 2.0759,123.33 -3.9253,184.78 -2.0509,26.634 3.3331,52.874 -1.1935,79.44 -1.2598,73.539 5.137,147.02 4.4523,220.58 -11.967,12.023 -5.9967,-16.65 -7.918,-21.552 z m 6.0394,-8 c -1.7306,-14.482 0.0119,-33.635 -3.3208,-45.221 1.0073,15.061 -1.7861,30.643 3.3208,45.221 z m 13.299,33 c -4.4426,-78.11 -1.9445,-158.25 -0.48398,-254.51 5.3151,-69.448 11.485,-139.38 2.459,-208.81 -2.8165,-11.423 1.2812,-58.307 3.8964,-26.381 2.3967,39.385 4.0627,78.844 4.9146,118.3 0.17638,24.683 -0.19834,49.364 -0.50872,74.044 12.41,-26.934 3.5229,-57.918 6.1377,-86.494 -2.9607,-34.912 -3.5827,-69.951 -7.4495,-104.7 9.3203,-28.143 11.246,17.257 11.119,27.088 9.21,167.22 -13.286,310.48 -4.2743,461.46 -22.072,-95.888 0.31655,-202.1 -1.8334,-292.62 -13.288,34.965 -3.817,66.052 -11.49,122.71 -1.1376,40.066 -0.3334,80.212 3.1391,120.15 -11.518,17.904 13.867,33.03 -5.6257,49.775 z m 41.186,0.5 c -1.8814,-42.287 -12.358,-83.945 -9.8197,-126.47 -2.5729,-122.29 9.1637,-244.28 9.6891,-366.53 9.7864,-13.416 1.6916,30.528 2.4289,38.892 -2.361,105.02 -12.197,233.98 -7.8488,351.65 -3.2662,29.054 14.115,48.168 10.692,76.789 -0.77837,8.4086 7.3991,22.393 -5.1417,25.675 z m 10.415,-2.5 c 5.2934,-44.249 -4.9632,-88.016 -12.162,-131.32 -5.7934,-58.265 -1.1666,-116.81 0.20906,-175.17 6.1741,32.721 -0.10049,66.239 2.103,99.317 -0.12483,38.867 6.9953,77.176 13.135,115.32 2.3788,30.908 2.1949,62.067 -1.4712,92.868 l -1.1971,0.11927 z m 7.8837,3.2304 c 2.904,-62.973 1.8064,-126.6 -11.188,-188.44 -5.0673,-90.85 -3.6527,-182.2 7.7057,-272.55 -0.71551,-11.295 -2.5077,-49.041 14.404,-37.913 -1.2484,44.103 -10.981,87.366 -15.517,131.11 -4.1094,150.87 -2.3505,145.67 9.2654,191.47 2.5039,36.091 5.8708,72.559 5.9104,108.55 -1.4848,22.941 7.7697,53.416 -9.7028,66.913 l -0.31133,0.83993 -0.56598,0.0324 z m 15.99,-68.98 c 1.5819,-122.52 -16.229,-245.44 0.0659,-367.56 0.01,-16.439 -1.273,-60.105 3.9933,-59.1 -4.6046,111.34 -10.617,222.94 -2.464,334.26 1.8394,53.9 3.2333,107.83 2.5706,161.77 -11.068,-21.861 -0.32865,-46.404 -4.1658,-69.376 z m 37.268,65.75 c -0.085,-36.525 2.2162,-73.034 6.2906,-109.32 29.176,11.87 3.9328,49.079 9.5134,72.245 -0.45821,10.809 4.9228,45.08 -15.804,37.079 z m 22.712,0 c 2.2459,-12.724 5.0989,-55.084 5.0672,-21.311 -0.15453,7.3299 -1.2016,14.93 -5.0672,21.311 z m 31.552,-3 c -1.8686,-128.49 20.836,-257.1 4.0844,-385.36 -6.439,-38.43 -5.3879,-77.314 -3.8693,-116.09 10.914,46.484 1.1245,96.792 9.1032,110.27 8.134,103 2.6237,206.36 1.1352,309.49 -5.4687,27.125 -2.3199,63.442 -9.7756,85.429 z m 7.482,-5 c 4.1164,-33.418 14.722,-66.42 8.0438,-100.28 -1.8106,-81.171 0.0183,-162.36 0.34586,-243.53 1.3954,110.76 1.366,221.84 2.384,332.42 0.1606,7.1573 -13.246,33.002 -10.774,11.398 z m 8.2252,-125.98 c -3.0923,1.8163 3.2473,2.117 0,0 z m 16.608,115.51 c 5.3442,-7.9098 -5.2672,-25.516 -3.9657,-6.6366 4.0483,-67.882 11.287,-136.44 -0.43743,-203.97 -3.112,-59.168 2.573,-118.39 1.412,-177.65 2.2876,-31.776 -4.1165,-66.116 4.9625,-96.33 24.308,-17.71 47.477,13.077 33.68,35.054 5.356,142.29 3.7322,284.71 2.4849,427.07 4.0139,20.134 -6.7598,47.755 -28.903,44.544 -8.5136,-3.5327 -11.953,-13.841 -9.2331,-22.087 z m 24.14,-258.78 c 2.9765,-63.817 0.90931,-127.79 -4.3387,-191.44 -12.492,24.572 -2.4148,54.173 -7.0552,80.695 0.33707,39.524 4.0331,78.963 9.7686,118.05 0.98038,-2.3605 1.4728,-4.7623 1.6253,-7.3094 z m -4.2831,-9.4167 c -1.3023,-5.882 2.2803,1.8534 0,0 z m 17.525,-96.312 c -3.0923,1.8163 3.2473,2.117 0,0 z m 0,-4 c -3.0923,1.8163 3.2473,2.117 0,0 z m -189.53,385.31 c -1.3023,-5.882 2.2803,1.8534 0,0 z m -106.31,-16.349 c -5.1998,-10.991 5.1196,-0.31473 0,0 z m 155.93,-15.42 c -13.027,2.8601 5.5943,-20.978 -9.077,-12.262 -2.2304,-98.242 -7.7917,-196.49 -6.4866,-294.77 1.0834,-25.638 4.3234,-51.529 3.7146,-76.958 15.618,-19.028 10.098,23.307 13.74,34.129 1.3681,25.262 5.4087,50.115 11.002,74.683 14.127,57.126 19.2,-58.224 22.851,-77.716 4.8688,-19.869 -1.337,-48.594 13.329,-62.845 8.0537,21.594 6.4441,46.133 11.204,68.822 9.6672,76.18 12.966,154.72 -2.3125,230.13 -14.271,-28.485 -14.479,-63.401 -23.326,-94.363 6.2231,20.138 -10.51,-17.431 -10.756,7.9493 -5.6101,40.494 -10.868,81.078 -16.488,121.6 -3.5238,27.064 -4.4953,54.742 -6.3843,81.686 l -1.0094,-0.0885 z m -5.0811,-86.538 c -3.0923,1.8163 3.2473,2.117 0,0 z m 12.965,-136.88 c -4.8777,-32.036 -7.7602,-64.371 -13.83,-96.223 -10.144,32.581 -4.5388,67.52 -4.4916,101.09 1.4267,28.952 0.37404,58.122 4.916,86.845 20.886,13.332 14.012,-83.322 13.406,-91.714 z m 50.495,50.153 c 10.254,-66.482 3.9743,-134.29 -8.1326,-200.08 -20.221,27.952 -8.8552,63.891 -14.174,95.514 1.8651,35.652 6.0387,72.245 22.306,104.56 z m -276.08,172.52 c -1.5635,-7.663 3.6079,2.9801 0,0 z m 192.62,-13.81 c 1.2852,-13.411 1.8206,6.8683 0,0 z m 88.715,-23.759 c -2.505,-14.372 4.3089,-18.897 2.173,-0.72406 0.35584,12.562 -3.8667,21.342 -2.173,0.72406 z m -20.449,16.318 c -4.7256,-12.203 2.302,-39.546 1.206,-10.868 0.047,3.645 -0.0345,7.3709 -1.206,10.868 z m -294.89,-7.25 c -1.2572,-6.0804 3.19,2.8566 0,0 z m 161.19,-5.06 c -0.11365,-7.6687 1.4032,4.1773 0,0 z m 0.0774,-7.5 c 0.75595,-8.1264 0.75595,8.1264 0,0 z m -145.19,-1.4167 c -1.3023,-5.882 2.2803,1.8534 0,0 z m 145.15,-6.58 c 0.54961,-6.8903 0.54961,6.8903 0,0 z m -272.96,-34.5 c 9.3987,-119.26 -1.1861,-102.54 1.6233,-3.73 -0.3118,8.81 -2.0793,21.54 -1.6233,3.73 z m 225.32,7.8732 c 0.16656,-18.87 -12.146,-67.601 0.49774,-69.034 5.3888,22.42 10.012,44.973 -0.49774,69.034 z m -187.94,-17.12 c -2.7286,-24.204 3.8813,-10.842 0.79153,5.4281 z m 4.015,-23.917 c -6.8314,-4.1098 2.2762,-6.6657 0,0 z m 94.333,-15.22 c -7.9961,-51.204 -7.7616,-103.31 -9.0726,-155.01 -0.85321,-54.347 -4.8172,-66.827 9.5815,-172.57 6.2312,12.661 -7.253,51.423 -5.6843,73.579 -2.4418,54.473 -1.3542,109.1 -0.44951,163.58 13.904,26.911 -19.879,73.65 5.625,90.411 z m -101,-66.78 c -27.333,158.3 -13.667,79.149 0,0 z m 148.39,-14.75 c -7.0815,-5.5382 2.7399,-7.2581 0,0 z m 92.685,-30.001 c -1.3023,-5.882 2.2803,1.8534 0,0 z m 1,-15 c -1.3023,-5.882 2.2803,1.8534 0,0 z m -47,-5 c -1.3023,-5.882 2.2803,1.8534 0,0 z m 200.92,-14.14 c 3.8083,-3.6006 -0.75385,6.9169 0,0 z m -123.38,-32.44 c 1.0242,-51.604 3.1997,-103.32 10.598,-154.45 8.0933,27.809 -7.0032,55.371 -5.5553,83.467 -1.8771,28.732 -1.0874,57.663 -5.1215,86.234 -0.3779,-5.0811 0.11282,-10.166 0.079,-15.25 z m 197.45,-8.4167 c -1.3023,-5.882 2.2803,1.8534 0,0 z m -56.426,-1.3354 c -1.6491,-38.762 -9.5992,-59.871 -7.6601,-142.93 13.432,3.7668 2.7812,39.721 6.6732,55.558 0.92313,29.101 4.3366,58.306 0.98691,87.376 z M 452.56,59.2847 c -3.0923,1.8163 3.2473,2.117 0,0 z m 58.68,86.737 c 0.75595,-8.1264 0.75595,8.1264 0,0 z m -296.8,-9.1007 c -3.2541,-13.074 3.9031,4.9153 0,0 z m 29.53,-1.81 c -5.41,-40.435 -10.33,-80.937 -15.03,-121.46 11.342,19.39 5.6354,46.11 9.6796,68.329 -1.0296,13.468 13.386,28.933 13.794,6.0984 3.3325,-19.533 -3.662,-59.538 0.103,-66.735 1.5822,37.562 4.3534,75.935 -5.255,112.73 2.504,-9.7228 -1.1806,0.9922 -3.2917,1.039 z m 96.667,-0.75811 c 0.68618,-21.219 3.7803,-67.731 6.1727,-72.615 -0.55773,24.305 -3.0488,48.52 -6.1727,72.615 z m -180.41,-5.62 c 0.63451,-12.321 10.085,-40.219 5.2536,-11.541 -0.63637,4.2001 -2.0014,8.5792 -5.2536,11.541 z m 349.74,-14.21 c 1.2808,-8.5005 1.5294,9.7299 0,0 z m -264.86,-10.41 c -2.9166,-4.7183 5.5545,1.9185 0,0 z m 265.11,-10.59 c 0.28529,-9.3558 0.9918,6.1152 0,0 z m -400.25,-6.451 c -6.37,-41.204 3.36,-106.66 7.3,-32.543 -1.33,10.862 -1.66,22.856 -7.3,32.543 z m 278.58,-13.271 c 0.87,-18.835 -14.6,-66.11 8.73,-64.037 6.03,21.837 -7.16,42.595 -8.73,64.037 z m 33.494,-0.19446 c -1.3023,-5.882 2.2803,1.8534 0,0 z m -193.43,-5.084 c 2.0221,-4.3555 0.78979,7.2532 0,0 z m -111.56,-13.917 c -1.3023,-5.882 2.2803,1.8534 0,0 z m 211,-26 c -1.3023,-5.882 2.2803,1.8534 0,0 z"
         fill="#8c5829" />
    </g>
  </g>
  <script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
</svg>
